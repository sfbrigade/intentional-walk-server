# Generated by Django 3.0.5 on 2020-06-24 05:07

import uuid

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


def migrate_appusers(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        # create unique accounts for each email
        cursor.execute(
            """
            INSERT INTO home_account (email, name, zip, age, created, updated)
            SELECT au.email, au.name, au.zip, au.age, au.created, NOW()
            FROM home_appuser au
            WHERE au.created=(
                SELECT MIN(au2.created)
                FROM home_appuser au2
                WHERE LOWER(au2.email)=LOWER(au.email)
            )
        """
        )
        # copy all of the device ids into the new devices table
        cursor.execute(
            """
            INSERT INTO home_device (device_id, account_id, created)
            SELECT au.account_id, ac.id, au.created
            FROM home_appuser au
            JOIN home_account ac
            ON LOWER(au.email)=LOWER(ac.email)
        """
        )
        # create some dummy rows to set initial default values in migration
        # (2021-11-03/lee51) Commenting out the following (as unnecessary)
        # cursor.execute("""
        #     INSERT INTO home_account
        #     (id, email, name, zip, age, created, updated)
        #     VALUES
        #     (0, 'dummy@email.com', 'Dummy Account', '94103', 0, NOW(), NOW())
        # """)
        # cursor.execute("""
        #     INSERT INTO home_device (device_id, account_id, created)
        #     VALUES ('0', 0, NOW())
        # """)


def migrate_walks(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        # update daily walk records
        cursor.execute(
            """
            UPDATE home_dailywalk
            SET device_id=sq.device_id, account_id=sq.account_id
            FROM (
                SELECT dev.device_id device_id,
                dev.account_id account_id,
                au.account_id appuser_id
                FROM home_device dev
                JOIN home_appuser au ON au.account_id=dev.device_id
            ) AS sq
            WHERE home_dailywalk.appuser_id=sq.appuser_id
        """
        )
        # delete duplicate records in daily walks, keeping the most recent
        cursor.execute(
            """
            DELETE FROM home_dailywalk dw
            WHERE dw.updated<>(
                SELECT MAX(dw2.updated)
                FROM home_dailywalk dw2
                WHERE dw2.account_id=dw.account_id
                AND dw2.date=dw.date
            )
        """
        )
        # update intentional walk records
        cursor.execute(
            """
            UPDATE home_intentionalwalk
            SET device_id=sq.device_id, account_id=sq.account_id
            FROM (
                SELECT dev.device_id device_id,
                dev.account_id account_id,
                au.account_id appuser_id
                FROM home_device dev
                JOIN home_appuser au ON au.account_id=dev.device_id
            ) AS sq
            WHERE home_intentionalwalk.appuser_id=sq.appuser_id
        """
        )


class Migration(migrations.Migration):

    dependencies = [
        ("home", "0005_contest_start_promo"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email which uniquely identifies an account",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="User's name", max_length=250),
                ),
                (
                    "zip",
                    models.CharField(
                        help_text="User's zipcode", max_length=25
                    ),
                ),
                ("age", models.IntegerField(help_text="User's age")),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Accounts creation timestamp",
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, help_text="Accounts updation timestamp"
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "device_id",
                    models.CharField(
                        help_text=(
                            "A unique id generated by the app when it is"
                            " first installed on a device. Used for"
                            " authentication on subsequent calls"
                        ),
                        max_length=250,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text=(
                            "When the record was created/device was registered"
                        ),
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
            },
        ),
        migrations.AddField(
            model_name="device",
            name="account",
            field=models.ForeignKey(
                help_text="User account associated with this registered device",
                on_delete=django.db.models.deletion.CASCADE,
                to="home.Account",
            ),
        ),
        migrations.RunPython(
            migrate_appusers, reverse_code=migrations.RunPython.noop
        ),
        migrations.AddField(
            model_name="account",
            name="contests",
            field=models.ManyToManyField(
                blank=True,
                help_text="All the contests the account has enrolled in",
                to="home.Contest",
            ),
        ),
        migrations.AddField(
            model_name="dailywalk",
            name="account",
            field=models.ForeignKey(
                default=0,
                help_text="Account the data is linked to",
                on_delete=django.db.models.deletion.CASCADE,
                to="home.Account",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="dailywalk",
            name="device",
            field=models.ForeignKey(
                default="0",
                help_text="Device the data is coming from",
                on_delete=django.db.models.deletion.CASCADE,
                to="home.Device",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="intentionalwalk",
            name="account",
            field=models.ForeignKey(
                default=0,
                help_text="Account the data is linked to",
                on_delete=django.db.models.deletion.CASCADE,
                to="home.Account",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="intentionalwalk",
            name="device",
            field=models.ForeignKey(
                default="0",
                help_text="Device the data is coming from",
                on_delete=django.db.models.deletion.CASCADE,
                to="home.Device",
            ),
            preserve_default=False,
        ),
        migrations.RunPython(
            migrate_walks, reverse_code=migrations.RunPython.noop
        ),
        migrations.RemoveConstraint(
            model_name="dailywalk",
            name="appuser_date",
        ),
        migrations.RemoveField(
            model_name="dailywalk",
            name="appuser",
        ),
        migrations.RemoveField(
            model_name="intentionalwalk",
            name="appuser",
        ),
        migrations.AddField(
            model_name="contest",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True,
                default=django.utils.timezone.now,
                help_text="Contest creation timestamp",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="contest",
            name="updated",
            field=models.DateTimeField(
                auto_now=True, help_text="Contest updation timestamp"
            ),
        ),
        migrations.AlterField(
            model_name="contest",
            name="contest_id",
            field=models.CharField(
                default=uuid.uuid4,
                help_text="Contest identifier",
                max_length=250,
                primary_key=True,
                serialize=False,
            ),
        ),
        migrations.AlterField(
            model_name="contest",
            name="end",
            field=models.DateField(help_text="Contest end date"),
        ),
        migrations.AlterField(
            model_name="contest",
            name="start",
            field=models.DateField(help_text="Contest start date"),
        ),
        migrations.AlterField(
            model_name="contest",
            name="start_promo",
            field=models.DateField(help_text="Start date of promotion"),
        ),
        migrations.AlterField(
            model_name="dailywalk",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, help_text="Record creation timestamp"
            ),
        ),
        migrations.AlterField(
            model_name="dailywalk",
            name="date",
            field=models.DateField(
                help_text="The specific for which the steps are recorded for"
            ),
        ),
        migrations.AlterField(
            model_name="dailywalk",
            name="distance",
            field=models.FloatField(help_text="Total distance covered"),
        ),
        migrations.AlterField(
            model_name="dailywalk",
            name="steps",
            field=models.IntegerField(help_text="Number of steps recorded"),
        ),
        migrations.AlterField(
            model_name="dailywalk",
            name="updated",
            field=models.DateTimeField(
                auto_now=True, help_text="Record updation timestamp"
            ),
        ),
        migrations.AlterField(
            model_name="intentionalwalk",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, help_text="Record creation timestamp"
            ),
        ),
        migrations.AlterField(
            model_name="intentionalwalk",
            name="distance",
            field=models.FloatField(help_text="Total distance covered"),
        ),
        migrations.AlterField(
            model_name="intentionalwalk",
            name="end",
            field=models.DateTimeField(
                help_text="Timestamp when the intentional walk ended"
            ),
        ),
        migrations.AlterField(
            model_name="intentionalwalk",
            name="pause_time",
            field=models.FloatField(
                help_text="Total time paused (in seconds)"
            ),
        ),
        migrations.AlterField(
            model_name="intentionalwalk",
            name="start",
            field=models.DateTimeField(
                help_text="Timestamp when the intentional walk started"
            ),
        ),
        migrations.AlterField(
            model_name="intentionalwalk",
            name="steps",
            field=models.IntegerField(help_text="Number of steps recorded"),
        ),
        migrations.AddConstraint(
            model_name="dailywalk",
            constraint=models.UniqueConstraint(
                fields=("account", "date"), name="account_date"
            ),
        ),
        migrations.DeleteModel(
            name="AppUser",
        ),
    ]
